#!/usr/bin/env python

import rospy
from geometry_msgs.msg import PoseWithCovarianceStamped
import tf
import tf2_ros
from tf.transformations import quaternion_from_euler

def main():
    rospy.init_node('initial_pose_publisher', anonymous=True)
    tf_buffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(tf_buffer)
    pub = rospy.Publisher('initialpose', PoseWithCovarianceStamped, queue_size=1)
    rospy.loginfo("Waiting for transform from base to map")
    source_frame = rospy.get_param('~source_frame', 'ropod/base_link')
    target_frame = rospy.get_param('~target_frame', 'map')
    initial_pose = rospy.get_param('~default_initial_pose')
    rate = rospy.Rate(1.0)
    while not rospy.is_shutdown():
        try:
            trans = tf_buffer.lookup_transform(source_frame, target_frame, rospy.Time())
            break
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            print('Waiting for transform from ' + source_frame + ' to ' + target_frame)
            rate.sleep()
            continue
    p = PoseWithCovarianceStamped()
    p.pose.pose.position.x = initial_pose[0]
    p.pose.pose.position.y = initial_pose[1]
    q = quaternion_from_euler(0.0, 0.0, initial_pose[2])
    p.pose.pose.orientation.x = q[0]
    p.pose.pose.orientation.y = q[1]
    p.pose.pose.orientation.z = q[2]
    p.pose.pose.orientation.w = q[3]
    p.header.stamp = rospy.Time.now()
    p.header.frame_id = target_frame
    pub.publish(p)
    rospy.sleep(1)


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
