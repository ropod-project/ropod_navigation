#! /usr/bin/env python

import rospy
import actionlib

from std_msgs.msg import Bool
from geometry_msgs.msg import Pose, PoseStamped, PoseWithCovarianceStamped

from ropod_ros_msgs.msg import GoToAction, GoToFeedback, GoToResult
from maneuver_navigation.msg import Goal as ManeuverNavigationGoal

from pyftsm.ftsm import FTSMStates, FTSMTransitions
from ropod.ftsm.ftsm_base import FTSMBase, DependMonitorTypes

class RouteNavigation(FTSMBase):

    """TODO"""


    mn_nav_pub = None
    mn_nav_cancel_pub = None
    localisation_sub = None
    goto_server = None
    current_action = None

    def __init__(self):
        component_name = 'route_navigation'
        dependencies = ['roscore', 'world_model_mediator', 'route_planner', 'maneuver_navigation']
        dependency_monitors = {'functional': {'roscore': 'ros/ros_master_monitor',
                                              'world_model_mediator': 'ros/ros_node_monitor',
                                              'route_planner': 'ros/ros_node_monitor',
                                              'maneuver_navigation': 'ros/ros_node_monitor'}}
        super(RouteNavigation, self).__init__(component_name, dependencies, dependency_monitors)

        self.mn_nav_topic = rospy.get_param('~mn_nav_topic', '/route_navigation/goal')
        self.mn_nav_cancel_topic = rospy.get_param('~mn_nav_cancel_topic',
                                                   '/route_navigation/cancel')
        self.localisation_topic = rospy.get_param('~localisation_topic', '/amcl_pose')

        self.goto_server_name = rospy.get_param('~goto_server_name', '/ropod/goto')

    def init(self):
        try:
            rospy.loginfo('[route_nav] Creating a "{0}" topic publisher'.format(self.mn_nav_topic))
            self.mn_nav_pub = rospy.Publisher(self.mn_nav_topic,
                                              ManeuverNavigationGoal,
                                              queue_size=1)

            rospy.loginfo('[route_nav] Creating a "{0}" topic publisher'.format(self.mn_nav_cancel_topic))
            self.mn_nav_cancel_pub = rospy.Publisher(self.mn_nav_cancel_topic,
                                                     Bool,
                                                     queue_size=1)

            rospy.loginfo('[route_nav] Creating a "{0}" topic publisher'.format(self.localisation_topic))
            self.localisation_sub = rospy.Subscriber(self.localisation_topic,
                                                     PoseWithCovarianceStamped,
                                                     self.__set_base_pose)


            rospy.loginfo('[route_nav] Creating a "{0}" action server'.format(self.goto_server_name))
            self.goto_server = actionlib.SimpleActionServer(self.goto_server_name,
                                                            GoToAction,
                                                            self.get_action, False)
            self.goto_server.start()
        except Exception as exc:
            rospy.logerr('[route_nav] Initialisation error: "{0}"'.format(str(exc)))
            return FTSMTransitions.INIT_FAILED

        return FTSMTransitions.INITIALISED

    def ready(self):
        if not self.current_action:
            return FTSMTransitions.WAIT
        return FTSMTransitions.RUN

    def running(self):
        if not self.current_action:
            return FTSMTransitions.DONE
        return FTSMTransitions.CONTINUE

    def recovering(self):
        return FTSMTransitions.DONE_RECOVERING

    def get_action(self, action_request):
        """TODO: Docstring for get_action.

        :action_request: GoToGoal
        :returns: None

        """
        rospy.loginfo(action_request)
        self.current_action = action_request
        rospy.sleep(3.0)
        self.goto_server.set_succeeded(GoToResult())
        self.current_action = None

    def __set_base_pose(self, pose_msg):
        '''Sets self.elevator_nav_data.base_pose to the given argument.

        Keyword arguments:
        pose_msg: geometry_msgs.msg.PoseWithCovarianceStamped

        '''
        self.elevator_nav_data.base_pose = pose_msg


if __name__ == "__main__":
    rospy.init_node('route_navigation')
    ROUTE_NAVIGATION = RouteNavigation()
    try:
        ROUTE_NAVIGATION.run()
        while ROUTE_NAVIGATION.is_running and not rospy.is_shutdown():
            rospy.sleep(0.1)
    except (KeyboardInterrupt, SystemExit):
        rospy.loginfo('{0} interrupted exiting...'.format(ROUTE_NAVIGATION.name))
        ROUTE_NAVIGATION.stop()

